/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package ui.Graphics;

import javax.swing.JOptionPane;

/**
 *
 * Clase que define unha ventá JDialog, a cal permite ao usuario introducir unha
 * palabra secreta. A palabra é validada para asegurarse de que só contén letras
 * minúsculas (a-z). Se a entrada é incorrecta, móstrase unha mensaxe de erro.
 *
 * @author omar.gilgonzalez
 */
public class GUIKeyboardGenerator extends javax.swing.JDialog {

    private String secretWord = null; //Atributo que almacena a palabra secreta. Se se preme "Cancelar", mantense en null.

    /**
     * Construtor que recibe como parámetros:
     *
     * parent: A ventá principal desde a que se chama ao diálogo.
     *
     * modal: Indica se o diálogo bloquea a xanela principal (valor true).
     *
     * Chama ao constructor de JDialog co parent e modal. Invoca
     * initComponents() para inicializar a interface gráfica. Usa
     * setLocationRelativeTo(parent) para centrar o diálogo respecto á ventá
     * principal.
     *
     */
    public GUIKeyboardGenerator(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputSecretWordsPasswordField = new javax.swing.JPasswordField();
        inputSecretWordsLabel = new javax.swing.JLabel();
        inputSecretWordsAccept = new javax.swing.JButton();
        inputSecretWordsCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Palabra secreta");
        setModal(true);

        inputSecretWordsPasswordField.setText("jPasswordField1");

        inputSecretWordsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inputSecretWordsLabel.setText("Introduce a palabra secreta:");

        inputSecretWordsAccept.setText("Aceptar");
        inputSecretWordsAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSecretWordsAcceptActionPerformed(evt);
            }
        });

        inputSecretWordsCancel.setText("Cancelar");
        inputSecretWordsCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSecretWordsCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputSecretWordsAccept)
                    .addComponent(inputSecretWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputSecretWordsPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSecretWordsCancel))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputSecretWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSecretWordsPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputSecretWordsAccept)
                    .addComponent(inputSecretWordsCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Método que obtén o texto do JPasswordField usando getPassword(). Chama a
     * isValidWord(word) para verificar se a palabra contén só letras
     * minúsculas:
     *
     * Se é válida, gárdaa en secretWord e pecha o diálogo con dispose(). Se non
     * é válida, mostra unha mensaxe de erro con JOptionPane.showMessageDialog()
     * e borra o campo.
     *
     * @param evt
     */
    private void inputSecretWordsAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSecretWordsAcceptActionPerformed
        String word = new String(inputSecretWordsPasswordField.getPassword());
        if (isValidWord(word)) {
            secretWord = word;
            dispose(); // Pecha a ventá
        } else {
            JOptionPane.showMessageDialog(this, "A palabra debe conter só letras minúsculas (a-z) e non pode estar baleira.", "Erro de entrada", JOptionPane.ERROR_MESSAGE);
            inputSecretWordsPasswordField.setText(""); // Borra o campo para intentar de novo
        }

    }//GEN-LAST:event_inputSecretWordsAcceptActionPerformed
    /**
     * Método que pecha o JDialog cando se preme "Cancelar", e a palabra
     * mantense en null.
     *
     * @param evt
     */
    private void inputSecretWordsCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSecretWordsCancelActionPerformed
        secretWord = null;
        dispose();
    }//GEN-LAST:event_inputSecretWordsCancelActionPerformed

    /**
     * Método que usa a expresión .matches para asegurarse de que a palabra só
     * contén letras minúsculas. Devolve true ou false dependendo de se é válida
     * ou non.
     *
     * @param word
     * @return
     */
    private boolean isValidWord(String word) {
        return word.matches("[a-z]+");
    }

    /**
     * Método que devolve a palabra secreta introducida, ou null se o usuario
     * cancela.
     *
     * @return
     */
    public String getSecretWord() {
        return secretWord;
    }

    /**
     * Método que crea unha instancia de GUIKeyboardGenerator e móstraa ao
     * usuario. Devolve a palabra secreta, ou null se o usuario cancelou
     *
     * @param parent
     * @return
     */
    public static String askForWord(java.awt.Frame parent) {
        GUIKeyboardGenerator dialog = new GUIKeyboardGenerator(parent, true);
        return dialog.getSecretWord();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIKeyboardGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIKeyboardGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIKeyboardGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIKeyboardGenerator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUIKeyboardGenerator dialog = new GUIKeyboardGenerator(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton inputSecretWordsAccept;
    private javax.swing.JButton inputSecretWordsCancel;
    private javax.swing.JLabel inputSecretWordsLabel;
    private javax.swing.JPasswordField inputSecretWordsPasswordField;
    // End of variables declaration//GEN-END:variables
}
